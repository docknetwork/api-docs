{
	"info": {
		"_postman_id": "0d0a750f-1712-4c34-8f87-9b566f19491d",
		"name": "Dock API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5579877"
	},
	"item": [
		{
			"name": "DIDs",
			"item": [
				{
					"name": "Create DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"setTimeout(function(){",
									"const jsonData = pm.response.json();",
									"pm.environment.set(\"did\", jsonData.data.did);",
									"pm.environment.set(\"jobId\", jsonData.id);",
									"",
									"// Get the response JSON",
									"var response = pm.response.json();",
									"",
									"// Verify top-level fields start with \"did:dock:\"",
									"pm.test(\"Verify top-level 'did' field starts with 'did:dock:'\", function () {",
									"    pm.expect(response.did.startsWith(\"did:dock:\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify top-level 'controller' field starts with 'did:dock:'\", function () {",
									"    pm.expect(response.controller.startsWith(\"did:dock:\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify top-level 'id' field is present and not empty\", function () {",
									"    pm.expect(response.id).to.exist;",
									"    pm.expect(response.id).to.not.be.empty;",
									"});",
									"",
									"// Verify nested data fields start with \"did:dock:\"",
									"pm.test(\"Verify nested 'data.did' field starts with 'did:dock:'\", function () {",
									"    pm.expect(response.data.did.startsWith(\"did:dock:\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify nested 'data.controller' field starts with 'did:dock:'\", function () {",
									"    pm.expect(response.data.controller.startsWith(\"did:dock:\")).to.be.true;",
									"});",
									"}, 5000);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"keyType\":\"ed25519\",\"type\":\"dock\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ecosystem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Verify the 'total' field is 0",
									"pm.test(\"Verify 'total' field is 0\", function () {",
									"    pm.expect(jsonData.total).to.eql(0);",
									"});",
									"",
									"// Verify the 'list' field is an empty array",
									"pm.test(\"Verify 'list' field is an empty array\", function () {",
									"    pm.expect(jsonData.list).to.be.an('array').that.is.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids/{{did}}/ecosystems",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids",
								"{{did}}",
								"ecosystems"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Resolve DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"const didValue = pm.environment.get(\"did\");",
									"",
									"// Verify the '@context' field",
									"pm.test(\"Verify '@context' field is an array containing 'https://www.w3.org/ns/did/v1'\", function () {",
									"    pm.expect(jsonData['@context']).to.be.an('array').that.includes('https://www.w3.org/ns/did/v1');",
									"});",
									"",
									"// Verify 'id' field equals the given DID value",
									"pm.test(\"Verify 'id' field equals the given DID value\", function () {",
									"    pm.expect(jsonData.id).to.eql(didValue);",
									"});",
									"",
									"// Verify 'controller' field is an array and each entry starts with the given DID value",
									"pm.test(\"Verify 'controller' field is an array and entries start with the given DID value\", function () {",
									"    pm.expect(jsonData.controller).to.be.an('array');",
									"    jsonData.controller.forEach(function(ctrl) {",
									"        pm.expect(ctrl).to.eql(didValue);",
									"    });",
									"});",
									"",
									"// Verify 'publicKey' field",
									"pm.test(\"Verify 'publicKey' field is an array with correct structure\", function () {",
									"    pm.expect(jsonData.publicKey).to.be.an('array').with.lengthOf(1);",
									"    var publicKey = jsonData.publicKey[0];",
									"    pm.expect(publicKey.id.startsWith(didValue)).to.be.true;",
									"    pm.expect(publicKey.type).to.eql(\"Ed25519VerificationKey2018\");",
									"    pm.expect(publicKey.controller).to.eql(didValue);",
									"    pm.expect(publicKey.publicKeyBase58).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// Helper function to verify array fields with keys",
									"function verifyArrayFieldStartsWith(arrayField, keyPrefix) {",
									"    pm.expect(jsonData[arrayField]).to.be.an('array');",
									"    jsonData[arrayField].forEach(function(item) {",
									"        pm.expect(item.startsWith(keyPrefix)).to.be.true;",
									"    });",
									"}",
									"",
									"// Verify 'authentication' field",
									"pm.test(\"Verify 'authentication' field entries start with the given DID value\", function () {",
									"    verifyArrayFieldStartsWith('authentication', didValue);",
									"});",
									"",
									"// Verify 'assertionMethod' field",
									"pm.test(\"Verify 'assertionMethod' field entries start with the given DID value\", function () {",
									"    verifyArrayFieldStartsWith('assertionMethod', didValue);",
									"});",
									"",
									"// Verify 'capabilityInvocation' field",
									"pm.test(\"Verify 'capabilityInvocation' field entries start with the given DID value\", function () {",
									"    verifyArrayFieldStartsWith('capabilityInvocation', didValue);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function() {",
									"    console.log(\"Wait to DID is created\");",
									"}, pm.environment.get(\"25000\")); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids/{{did}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids",
								"{{did}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"const didPrefix = \"did:dock:\";",
									"",
									"// Verify that the response is an array and its length is greater than 0",
									"pm.test(\"Verify response is a non-empty array\", function () {",
									"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// Verify fields in the first object in the array",
									"const item = jsonData[0];",
									"",
									"pm.test(\"Verify 'id' field in the first item starts with 'did:dock:'\", function () {",
									"    pm.expect(item.id).to.be.a('string').and.satisfy(id => id.startsWith(didPrefix));",
									"});",
									"",
									"pm.test(\"Verify 'did' field in the first item starts with 'did:dock:'\", function () {",
									"    pm.expect(item.did).to.be.a('string').and.satisfy(did => did.startsWith(didPrefix));",
									"});",
									"",
									"pm.test(\"Verify 'type' field in the first item is 'dock'\", function () {",
									"    pm.expect(item.type).to.eql('dock');",
									"});",
									"",
									"pm.test(\"Verify 'controller' field in the first item starts with 'did:dock:'\", function () {",
									"    pm.expect(item.controller).to.be.a('string').and.satisfy(controller => controller.startsWith(didPrefix));",
									"});",
									"",
									"pm.test(\"Verify 'credentialCount' field in the first item is a string\", function () {",
									"    pm.expect(item.credentialCount).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Verify 'updatedLast' field in the first item is a valid date string\", function () {",
									"    pm.expect(new Date(item.updatedLast).toString()).not.to.eql('Invalid Date');",
									"});",
									"",
									"pm.test(\"Verify 'profile' field in the first item is null\", function () {",
									"    pm.expect(item.profile).to.be.null;",
									"});",
									"",
									"pm.test(\"Verify 'keyId' field in the first item starts with 'did:dock:'\", function () {",
									"    pm.expect(item.keyId).to.be.a('string').and.satisfy(keyId => keyId.startsWith(didPrefix));",
									"});",
									"",
									"pm.test(\"Verify 'jobId' field in the first item is a string\", function () {",
									"    pm.expect(item.jobId).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Verify 'trustRegistries' field in the first item is an array\", function () {",
									"    pm.expect(item.trustRegistries).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"const didPrefix = pm.environment.get(\"did\");",
									"",
									"pm.test(\"Status code to update DID is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify the 'did' field starts with 'did:dock:'",
									"pm.test(\"Verify 'did' field starts with 'did:dock:'\", function () {",
									"    pm.expect(jsonData.did).to.be.a('string').and.satisfy(did => did.startsWith(didPrefix));",
									"});",
									"",
									"// Verify the 'name' field is 'did_update_name_neural'",
									"pm.test(\"Verify 'name' field is 'did_update_name_neural'\", function () {",
									"    pm.expect(jsonData.name).to.contain('did_update_name_');",
									"});",
									"",
									"// Verify the 'description' field is an empty string",
									"pm.test(\"Verify 'description' field is an empty string\", function () {",
									"    pm.expect(jsonData.description).to.eql('');",
									"});",
									"",
									"// Verify the 'logo' field is an empty string",
									"pm.test(\"Verify 'logo' field is an empty string\", function () {",
									"    pm.expect(jsonData.logo).to.eql('');",
									"});",
									"",
									"// Verify the 'type' field is 'dock'",
									"pm.test(\"Verify 'type' field is 'dock'\", function () {",
									"    pm.expect(jsonData.type).to.eql('dock');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"did_update_name_{{$randomAdjective}}\",\n    \"description\": \"\",\n    \"logo\": \"\",\n    \"type\": \"dock\",\n    \"did\": \"{{did}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/profiles",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"profiles"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Verify '@context' field",
									"pm.test(\"Verify '@context' field contains expected URLs\", function () {",
									"    pm.expect(jsonData['@context']).to.be.an('array').that.includes('https://www.w3.org/2018/credentials/v1', 'https://w3id.org/wallet/v1');",
									"});",
									"",
									"// Verify 'id' field starts with 'did:key:'",
									"pm.test(\"Verify 'id' field starts with 'did:key:'\", function () {",
									"    pm.expect(jsonData.id).to.be.a('string').and.satisfy(id => id.startsWith('did:key:'));",
									"});",
									"",
									"// Verify 'type' field contains 'VerifiableCredential' and 'EncryptedWallet'",
									"pm.test(\"Verify 'type' field contains 'VerifiableCredential' and 'EncryptedWallet'\", function () {",
									"    pm.expect(jsonData.type).to.be.an('array').that.includes('VerifiableCredential', 'EncryptedWallet');",
									"});",
									"",
									"// Verify 'issuer' field starts with 'did:key:'",
									"pm.test(\"Verify 'issuer' field starts with 'did:key:'\", function () {",
									"    pm.expect(jsonData.issuer).to.be.a('string').and.satisfy(issuer => issuer.startsWith('did:key:'));",
									"});",
									"",
									"// Verify 'issuanceDate' field is a valid date string",
									"pm.test(\"Verify 'issuanceDate' field is a valid date string\", function () {",
									"    pm.expect(new Date(jsonData.issuanceDate).toString()).not.to.eql('Invalid Date');",
									"});",
									"",
									"// Verify 'credentialSubject.id' field starts with 'did:key:'",
									"pm.test(\"Verify 'credentialSubject.id' field starts with 'did:key:'\", function () {",
									"    pm.expect(jsonData.credentialSubject.id).to.be.a('string').and.satisfy(id => id.startsWith('did:key:'));",
									"});",
									"",
									"// Verify 'credentialSubject.encryptedWalletContents.protected' field is a non-empty string",
									"pm.test(\"Verify 'credentialSubject.encryptedWalletContents.protected' field is a non-empty string\", function () {",
									"    pm.expect(jsonData.credentialSubject.encryptedWalletContents.protected).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// Verify 'credentialSubject.encryptedWalletContents.recipients' is a non-empty array",
									"pm.test(\"Verify 'credentialSubject.encryptedWalletContents.recipients' is a non-empty array\", function () {",
									"    pm.expect(jsonData.credentialSubject.encryptedWalletContents.recipients).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"// Verify 'credentialSubject.encryptedWalletContents.iv' field is a non-empty string",
									"pm.test(\"Verify 'credentialSubject.encryptedWalletContents.iv' field is a non-empty string\", function () {",
									"    pm.expect(jsonData.credentialSubject.encryptedWalletContents.iv).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// Verify 'credentialSubject.encryptedWalletContents.ciphertext' field is a non-empty string",
									"pm.test(\"Verify 'credentialSubject.encryptedWalletContents.ciphertext' field is a non-empty string\", function () {",
									"    pm.expect(jsonData.credentialSubject.encryptedWalletContents.ciphertext).to.be.a('string').that.is.not.empty;",
									"});",
									"",
									"// Verify 'credentialSubject.encryptedWalletContents.tag' field is a non-empty string",
									"pm.test(\"Verify 'credentialSubject.encryptedWalletContents.tag' field is a non-empty string\", function () {",
									"    pm.expect(jsonData.credentialSubject.encryptedWalletContents.tag).to.be.a('string').that.is.not.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"123456789QW!\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids/{{did}}/export",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids",
								"{{did}}",
								"export"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response status code is 200",
									"pm.environment.set(\"did\", \"\");",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Get the response JSON",
									"const jsonData = pm.response.json();",
									"",
									"// Verify the 'id' field is '32777'",
									"pm.test(\"Verify 'id' field is not empty\", function () {",
									"    pm.expect(jsonData.id).not.to.be.null;",
									"});",
									"",
									"// Verify the 'data' field is an object",
									"pm.test(\"Verify 'data' field is an object\", function () {",
									"    pm.expect(jsonData.data).to.be.an('object');",
									"});",
									"",
									"// Verify the 'status' field inside 'data' is 'deleted'",
									"pm.test(\"Verify 'status' field inside 'data' is 'deleted'\", function () {",
									"    pm.expect(jsonData.data.status).to.eql('deleted');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids/{{did}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids",
								"{{did}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{ApiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "DOCK-API-TOKEN",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Credentials",
			"item": [
				{
					"name": "Create Signed Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"savedData\", \"\");",
									"let response = pm.response.json(),",
									"    savedData = JSON.stringify(response);",
									"pm.collectionVariables.set(\"signedCredential\", savedData);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential\": {\n    \"id\": \"http://example.com/39\",\n    \"context\": [\"https://www.w3.org/2018/credentials/examples/v1\"],\n    \"type\": [\n      \"VerifiableCredential\"\n    ],\n    \"subject\": {\n        \"id\": \"{{did}}\"\n    },\n    \"issuer\": {\n        \"id\": \"{{did}}\",\n        \"name\": \"Issuer Name\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/credentials",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"credentials"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Signed Credential using Past Dates",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential\": {\n    \"id\": \"http://example.com/39\",\n    \"context\": [\"https://www.w3.org/2018/credentials/examples/v1\"],\n    \"type\": [\n      \"VerifiableCredential\"\n    ],\n    \"subject\": {\n        \"id\": \"{{did}}\"\n    },\n    \"issuer\": {\n       \"id\": \"{{did}}\",\n        \"name\": \"Issuer Name\"\n    },\n    \"issuanceDate\": \"2019-08-24T14:15:22Z\",\n    \"expirationDate\": \"2019-08-24T14:15:22Z\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/credentials",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"credentials"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Signed Credential with Anchor",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"anchor\": true,\n    \"credential\": {\n        \"type\": [\n            \"MyCredential\"\n        ],\n        \"subject\": {\n            \"id\": \"{{did}}\"\n        },\n        \"issuer\": \"{{did}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/credentials",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"credentials"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unsigned Credential",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credential\": {\n        \"type\": [\n            \"MyCredential\"\n        ],\n        \"subject\": {\n            \"id\": \"{{did}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/credentials",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"credentials"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Credentials from single VC",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{signedCredential}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/verify",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"verify"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Presentations",
			"item": [
				{
					"name": "Create Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"savedData\", \"\");",
									"let response = pm.response.json(),",
									"    savedData = JSON.stringify(response);",
									"pm.collectionVariables.set(\"createdPresentation\", savedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challenge\": \"my challenge\",\n  \"domain\": \"dock.io\",\n  \"holder\": \"{{did}}\",\n  \"credentials\": [{{signedCredential}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/presentations",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"presentations"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registries",
			"item": [
				{
					"name": "Create Registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"registryId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"addOnly\": false,\n  \"policy\": [\n    \"{{did}}\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/registries",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all registries",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/registries",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Single Registry by ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/registries/{{registryId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries",
								"{{registryId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete registry",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{BaseUrl}}/registries/{{registryId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries",
								"{{registryId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Revoke Credential By Registry ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"revokeIds\", jsonData.data.revokeIds);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"revoke\",\n  \"credentialIds\": [\n    \"https://credentials.dock.io/3e343b80ebaefb40d8f9d99ec27a885e\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/registries/{{registryId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries",
								"{{registryId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unrevoke Credential By Registry ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"action\": \"unrevoke\",\n  \"credentialIds\": [\n    \"https://credentials.dock.io/3e343b80ebaefb40d8f9d99ec27a885e\"\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/registries/{{registryId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"registries",
								"{{registryId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Revocation Status",
			"item": [
				{
					"name": "Get Revocation Status",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/revocationStatus/{{registryId}}/{{revokeIds}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"revocationStatus",
								"{{registryId}}",
								"{{revokeIds}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Credential Schemas",
			"item": [
				{
					"name": "Create Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"schemaId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"description\": \"Dock Schema Example\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"emailAddress\": {\n      \"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"alumniOf\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"emailAddress\",\n    \"alumniOf\"\n  ],\n  \"additionalProperties\": false,\n  \"author\": \"{{did}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/schemas",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"schemas"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Schemas",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/schemas",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"schemas"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/schemas/{{schemaId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"schemas",
								"{{schemaId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Anchors",
			"item": [
				{
					"name": "Create Anchor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"anchorId\", jsonData.data.root);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"TestAnchor{{$randomInt}}==\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/anchors",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"anchors"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Anchors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/anchors",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"anchors"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Anchor",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/anchors/{{anchorId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"anchors",
								"{{anchorId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "Get Job Status And Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/jobs/{{jobId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify",
			"item": [
				{
					"name": "Verify Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{createdPresentation}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/verify",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"verify"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Credential",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{signedCredential}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/verify",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"verify"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Simple E2E Create Credentials/Presentation Flow",
			"item": [
				{
					"name": "1. Create a DID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"did\", jsonData.data.did);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/dids",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"dids"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Verify the New DID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/jobs/{{jobId}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"jobs",
								"{{jobId}}"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Create a Signed Credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"savedData\", \"\");",
									"let response = pm.response.json(),",
									"    savedData = JSON.stringify(response);",
									"pm.collectionVariables.set(\"signedCredential\", savedData);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"credential\": {\n    \"id\": \"http://example.com/39\",\n    \"context\": [\"https://www.w3.org/2018/credentials/examples/v1\"],\n    \"type\": [\n      \"VerifiableCredential\"\n    ],\n    \"subject\": {\n        \"id\": \"{{did}}\"\n    },\n    \"issuer\": {\n        \"id\": \"{{did}}\",\n        \"name\": \"Issuer Name\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/credentials",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"credentials"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Verify the Signed Credential",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{signedCredential}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/verify",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"verify"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Create a Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"savedData\", \"\");",
									"let response = pm.response.json(),",
									"    savedData = JSON.stringify(response);",
									"pm.collectionVariables.set(\"createdPresentation\", savedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"challenge\": \"my challenge\",\n  \"domain\": \"dock.io\",\n  \"holder\": \"{{did}}\",\n  \"credentials\": [{{signedCredential}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/presentations",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"presentations"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Verify the Presentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{createdPresentation}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/verify",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"verify"
							],
							"query": [
								{
									"key": "headers",
									"value": "headers",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{ApiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "DOCK-API-TOKEN",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "dock-api-token",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{ApiKey}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://api-testnet.dock.io"
		},
		{
			"key": "ApiKey",
			"value": ""
		},
		{
			"key": "signedCredential",
			"value": ""
		},
		{
			"key": "savedData",
			"value": ""
		},
		{
			"key": "saveSignedCredential",
			"value": ""
		},
		{
			"key": "createdPresentation",
			"value": ""
		}
	]
}