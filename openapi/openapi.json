{
  "openapi": "3.0.2",
  "info": {
    "version": "1",
    "title": "Dock API",
    "description": "Use Dock's complete solution for creating and managing verifiable credentials on the blockchain.\nWe handle the pricing of blockchain operations for you, you simply get billed monthly through fiat.\n"
  },
  "tags": [
    {
      "name": "dids",
      "description": "Operations about DIDs"
    },
    {
      "name": "credentials",
      "description": "Operations about credentials"
    },
    {
      "name": "registries",
      "description": "Operations about registries"
    },
    {
      "name": "revocationStatus",
      "description": "Operations about revocation_status"
    },
    {
      "name": "schemas",
      "description": "Operations about schemas"
    },
    {
      "name": "anchors",
      "description": "Operations about anchors"
    },
    {
      "name": "jobs",
      "description": "Operations about jobs"
    }
  ],
  "components": {
    "securitySchemes": {
      "accessToken": {
        "type": "apiKey",
        "in": "header",
        "name": "DOCK-API-TOKEN"
      }
    },
    "schemas": {
      "Hex32": {
        "description": "32 byte hex string. Ignoring higher base (base64) for similicity. TODO -> Specify hex format in spec",
        "type": "string",
        "minimum": 64,
        "maximum": 64
      },
      "JobStartedResult": {
        "description": "Object containing unique id of the background task and associated data. This id can be used to query the job status",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JobId"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "JobId": {
        "description": "Unique id of the background task. This id can be used to query the job status",
        "type": "string"
      },
      "JobStatus": {
        "description": "Status of the job.",
        "type": "string",
        "enum": [
          "todo",
          "finalized",
          "in_progress",
          "error"
        ]
      },
      "JobDesc": {
        "description": "Description of the job including result if available",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/JobId"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "result": {
            "type": "object"
          }
        }
      },
      "DIDQualified": {
        "description": "DID as fully qualified, eg. `did:dock:`.",
        "type": "string",
        "format": "uri"
      },
      "DID": {
        "description": "DID as 32 byte hex of fully quanlified",
        "type": "string",
        "minimum": 32
      },
      "KeyType": {
        "description": "Type of public key for DID",
        "type": "string",
        "enum": [
          "sr25519",
          "ed25519",
          "secp256k1"
        ]
      },
      "SigType": {
        "description": "Type of signature",
        "type": "string",
        "enum": [
          "Sr25519Signature2020",
          "Ed25519Signature2018",
          "EcdsaSecp256k1Signature2019"
        ]
      },
      "ProofPurpose": {
        "description": "Purpose of credential",
        "type": "string",
        "enum": [
          "assertionMethod"
        ]
      },
      "Context": {
        "description": "JSON-LD context",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string"
          }
        ]
      },
      "DIDDoc": {
        "description": "DID document. The current set of properties is incomplete",
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "id": {
            "$ref": "#/components/schemas/DIDQualified"
          },
          "authentication": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      },
      "Credential": {
        "description": "Credential format expected by API caller. The current set of is almost complete",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uri"
          },
          "type": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "type": "object"
          },
          "issuer": {
            "$ref": "#/components/schemas/DID"
          },
          "issuanceDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Revocation registry id or user supplied status object",
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "VerifiableCredential": {
        "description": "Verifiable (signed) Credential returned by API. The current set of properties is almost complete",
        "type": "object",
        "properties": {
          "@context": {
            "$ref": "#/components/schemas/Context"
          },
          "id": {
            "type": "string",
            "format": "uri"
          },
          "type": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "credentialSubject": {
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ]
          },
          "issuer": {
            "$ref": "#/components/schemas/DID"
          },
          "issuanceDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "credentialStatus": {
            "description": "Revocation registry id or user supplied status object",
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ]
          },
          "proof": {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/SigType"
              },
              "proofPurpose": {
                "$ref": "#/components/schemas/ProofPurpose"
              },
              "verificationMethod": {
                "type": "string"
              },
              "created": {
                "type": "string",
                "format": "date-time"
              },
              "jws": {
                "type": "string"
              }
            }
          }
        }
      },
      "Anchor": {
        "description": "An anchor. Either a batched or single. Data includes anchor, type (single, batch), block hash, block no and accompanying data (root, proofs) if any. The data depends if the anchor was created using API or not.",
        "type": "object",
        "properties": {
          "anchor": {
            "$ref": "#/components/schemas/Hex32"
          },
          "blockHash": {
            "$ref": "#/components/schemas/Hex32"
          },
          "root": {
            "$ref": "#/components/schemas/Hex32"
          }
        }
      },
      "Registry": {
        "description": "Revocation registry",
        "type": "object",
        "properties": {
          "addOnly": {
            "type": "boolean"
          },
          "policy": {
            "description": "Only one policy supported as of now called `OneOf`",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DID"
            }
          }
        }
      },
      "Response": {
        "description": "Default response",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          }
        }
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "paths": {
    "/jobs/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "A Job id",
          "schema": {
            "$ref": "#/components/schemas/JobId"
          }
        }
      ],
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get job status and data",
        "description": "Returns information related to the job being processed and its associated blockchain transaction. On completion or failure, the job data will be updated with a response from the blockchain.",
        "responses": {
          "200": {
            "description": "Job desc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobDesc"
                }
              }
            }
          },
          "404": {
            "description": "Job id was not found."
          }
        }
      }
    },
    "/dids/{did}": {
      "parameters": [
        {
          "name": "did",
          "in": "path",
          "required": true,
          "description": "A DID",
          "schema": {
            "$ref": "#/components/schemas/DID"
          }
        }
      ],
      "get": {
        "tags": [
          "dids"
        ],
        "summary": "Get DID",
        "description": "Resolves a specific DID into a DID document.",
        "responses": {
          "200": {
            "description": "The DIDDoc",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DIDDoc"
                }
              }
            }
          },
          "404": {
            "description": "DID was not found."
          }
        }
      },
      "patch": {
        "tags": [
          "dids"
        ],
        "summary": "Update DID",
        "description": "Updates the DID's key or controller on the blockchain.",
        "requestBody": {
          "description": "Properties of DID",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "controller": {
                    "$ref": "#/components/schemas/DID"
                  },
                  "keyType": {
                    "$ref": "#/components/schemas/KeyType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will update DID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "401": {
            "description": "Does not own the DID"
          },
          "404": {
            "description": "DID does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "dids"
        ],
        "summary": "Delete DID",
        "description": "Deletes a DID from the blockchain, further attempts to resolve this DID will fail.",
        "responses": {
          "200": {
            "description": "Will remove DID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "401": {
            "description": "Does not own the DID"
          },
          "404": {
            "description": "DID does not exist"
          }
        }
      }
    },
    "/dids/": {
      "get": {
        "tags": [
          "dids"
        ],
        "summary": "List DIDs",
        "responses": {
          "200": {
            "description": "All of a user's DIDs fully resolved into DID documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DIDDoc"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dids"
        ],
        "summary": "Create DID",
        "description": "Creates a new DID on chain with an auto generated keypair, the controller will be the same as the DID unless otherwise specified.",
        "requestBody": {
          "description": "Properties of DID",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "did": {
                    "$ref": "#/components/schemas/DID"
                  },
                  "controller": {
                    "$ref": "#/components/schemas/DID"
                  },
                  "keyType": {
                    "$ref": "#/components/schemas/KeyType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will try to create DID. DID does not exist on network as of now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStartedResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params"
          }
        }
      }
    },
    "/credentials/": {
      "post": {
        "tags": [
          "credentials"
        ],
        "summary": "Issue a credential",
        "description": "Creates and issues a verifiable credential with supplied data. Issuing counts as a paid transaction.",
        "requestBody": {
          "description": "JSON-schema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credential": {
                    "$ref": "#/components/schemas/Credential"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A VC.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiableCredential"
                }
              }
            }
          },
          "400": {
            "description": "Invalid/insufficient credential params."
          },
          "401": {
            "description": "User does not own DID."
          }
        }
      }
    },
    "/registries/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Revocation registry id",
          "schema": {
            "$ref": "#/components/schemas/Hex32"
          }
        }
      ],
      "delete": {
        "tags": [
          "registries"
        ],
        "summary": "Delete registry",
        "description": "Deletes a specific registry",
        "responses": {
          "200": {
            "description": "Revocation Registry was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "404": {
            "description": "Registry was not found."
          }
        }
      },
      "get": {
        "tags": [
          "registries"
        ],
        "summary": "Get registry",
        "description": "Get the registry details like policy, controller(s)",
        "responses": {
          "200": {
            "description": "Revocation Registry metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "404": {
            "description": "Registry was not found."
          }
        }
      },
      "post": {
        "tags": [
          "registries"
        ],
        "summary": "Revoke/unrevoke credential",
        "description": "Revoke or unrevoke one or more credential ids",
        "requestBody": {
          "description": "Specify action and credential ids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "revoke",
                      "unrevoke"
                    ]
                  },
                  "credentialIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will try to update registry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params"
          },
          "404": {
            "description": "Registry was not found."
          }
        }
      }
    },
    "/registries/": {
      "get": {
        "tags": [
          "registries"
        ],
        "summary": "List registries",
        "description": "Get all registries created by user",
        "responses": {
          "200": {
            "description": "All registries by user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/components/schemas/Hex32"
                      },
                      "registry": {
                        "$ref": "#/components/schemas/Registry"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "registries"
        ],
        "summary": "Create registry",
        "description": "Create a Revocation registry on the blockchain",
        "requestBody": {
          "description": "Revocation registry",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will try to create registry.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params like policy not supported."
          }
        }
      }
    },
    "/revocationStatus/{regId}/{revId}": {
      "parameters": [
        {
          "name": "regId",
          "in": "path",
          "required": true,
          "description": "Revocation registry id",
          "schema": {
            "$ref": "#/components/schemas/Hex32"
          }
        },
        {
          "name": "revId",
          "in": "path",
          "required": true,
          "description": "Credential revocation id",
          "schema": {
            "$ref": "#/components/schemas/Hex32"
          }
        }
      ],
      "get": {
        "tags": [
          "revocationStatus"
        ],
        "summary": "Get the revocation status of a credential",
        "responses": {
          "200": {
            "description": "Returns true of credential is revoked, false otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Registry was not found."
          }
        }
      }
    },
    "/schemas/{schemaId}": {
      "parameters": [
        {
          "name": "schemaId",
          "in": "path",
          "required": true,
          "description": "A schema id",
          "schema": {
            "$ref": "#/components/schemas/Hex32"
          }
        }
      ],
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "Get schema",
        "description": "Returns the JSON schema for a specific ID",
        "responses": {
          "200": {
            "description": "Schema",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/Hex32"
                    },
                    "schema": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schema was not found."
          }
        }
      }
    },
    "/schemas/": {
      "get": {
        "tags": [
          "schemas"
        ],
        "summary": "List schemas",
        "description": "Get all schemas created by user",
        "responses": {
          "200": {
            "description": "All schemas by user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "schemas"
        ],
        "summary": "Create schema",
        "description": "Creates a JSON schema on the blockchain",
        "requestBody": {
          "description": "JSON-schema",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will try to create schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params like size not supported or not JSON."
          }
        }
      }
    },
    "/anchors/{anchor}": {
      "parameters": [
        {
          "name": "anchor",
          "in": "path",
          "required": true,
          "description": "An anchor",
          "schema": {
            "$ref": "#/components/schemas/Hex32"
          }
        }
      ],
      "get": {
        "tags": [
          "anchors"
        ],
        "summary": "Get anchor",
        "description": "Gets a specific anchor by ID",
        "responses": {
          "200": {
            "description": "Anchor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Anchor"
                }
              }
            }
          },
          "404": {
            "description": "Anchor was not found."
          }
        }
      }
    },
    "/anchors/": {
      "get": {
        "tags": [
          "anchors"
        ],
        "summary": "List anchors",
        "description": "Get all anchors created by user",
        "responses": {
          "200": {
            "description": "All anchors by user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "anchors"
        ],
        "summary": "Create anchor",
        "description": "Anchor one or more documents. If more than one docs are given, a merkle tree is created and root is anchored",
        "requestBody": {
          "description": "Documents",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "byte"
                    }
                  },
                  {
                    "type": "string",
                    "format": "byte"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Will try to create Anchor. Anchor does not exist on network as of now.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobId"
                }
              }
            }
          },
          "400": {
            "description": "Invalid params"
          }
        }
      }
    }
  }
}